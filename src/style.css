/* we put the *{} to remove all the basic styling of the browser 
universal selector (*) selects all HTML elements on the page. */
* {
    margin: 0;
    padding: 0;
}
/* To define locale variables */
:root {
    --main-bg-color: #e0efdb;
    --success: #2de12d;
    --delete: red;
    --edit: rgb(185, 65, 236);
    --collapse: rgb(236 157 65);
    --border-grey: #b2b2b8;
    --cancel: #b2b2b8;
    --high-score: #a2efa5;
    --medium-score: #f3ba61;
    --low-score: #f06c6c;
}

body {
    /* To create a linear  gradient */
    background: linear-gradient(180deg, var(--main-bg-color), white);
    color: black; /* text color*/
    font-family: "Nunito", sans-serif;
    min-height: 100vh;
    padding-left: 20px;
    padding-right: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
}
nav {
    width: 100vw;
    padding: 20px;
    background: #272e4f;
    position: fixed;
    z-index: 5;
    margin-left: 40px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.track-record-items{
    margin-right: 60px;
}
header{
    font-size: 1rem;
}
/* To style more than 1 type */
header, form {
    width: 100%;
    display: flex;
    justify-content: start;
    align-items: center;
    margin: 1.2rem 0rem;
}

.nav-button{
    padding: 10px;
    background: #39427a;
    border-radius: 10px;
    color: white;
    text-decoration: none;
    margin-right: 5px;
}

.nav-button:hover{
    background: #434c87;
}

section {
    width: 100%;
    margin-top: 80px;
}

.input-field {
    display: flex;
    flex-direction: column;
}

.form-grid {
    width: 100%;
    display: grid; /* use grid to align <div> elements side by side */
    grid-template-columns: 1fr 1fr; /* Two columns of equal width */
    gap: 1rem; /* Space between grid items */
}

.form-grid > div {
    display: flex;
    flex-direction: column;
}

.form-grid label {
    margin-bottom: 0.5rem;
}
/* To access nested, we just put a space between */
.form-grid input, select {
    padding: 0.5rem;
    border: 1px solid var(--border-grey);
    border-radius: 4px;
}

.application-container {
    width: 100%;
}
.applications {
    display: flex;
    width: 40%;
    justify-content: space-between;
    margin: 0.5rem 0rem;
    /* Add a transition */
    transition: all 0.5s ease;
}

/* What this does is push the rest of the elements to the end */
.applications li {
    flex: 1;
}

.add-btn {
    padding: 0.5rem 1rem;
    border-radius: 30px;
    border: none;
    font-size: medium;
    background: #9ca6e6;
}

.add-btn:hover {
    background: #434764;
}

.submit-btn {
    padding: 0.5rem 0.6rem;
    min-width: 35px;
    border-radius: 30px;
    border: none;
    font-size: medium;
    background: var(--success);
}

.close-btn {
    padding: 0.5rem 0.6rem;
    min-width: 35px;
    border-radius: 30px;
    border: none;
    font-size: medium;
    background: var(--cancel);
}

.edit-btn, .delete-btn, .collapse-btn {
    padding: 0.2rem;
    /* margin-left: 10px; */
    border-radius: 5px;
    width: 25px;
    display: flex;
    justify-content: center;
    border: none;
    font-size: large;
}
.delete-btn{
    background: var(--delete);
}
.edit-btn{
    background: var(--edit);
}

.collapse-btn {
    background: var(--collapse);
}
/* remove the clicking for the icons as they interfere with the button */
.fa-trash-can, .fa-pen-to-square, .fa-eye {
    pointer-events: none;
}

button:hover {
    color: white;
}

.application-list {
    list-style: none; /* To remove the bullet points */
}
.application-item {
    /* Top-bottom left-right */
    padding: 0rem 0.5rem;
}

.application-row {
    background: whitesmoke;
}

/* Animation */
.fall-animation {
    transform: translateY(10rem) rotateZ(20deg);
    opacity: 0;
  }


dialog {
    width: 50%;
    max-width: 500px;
    height: 60%;
    overflow: scroll;
    padding: 1rem;
    border: none;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    /* center the dialog to the viewport center */
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.dialog-btns {
    justify-content: end;
    display: flex;
    gap: 0.5rem;
}



dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
}

.table-view {
    margin-top: 20px;
    max-height: 70vh;
    overflow: scroll;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    /* 
    1 -Horizontal offset (no horizontal shift)
    2 -Vertical offset
    3 -Blur radius
    4 - color
    */
}

table{
    width: 100%;
    overflow-x: auto;
    border-spacing: 0.5px;
    thead th {
        position: sticky;
        top: 0;
        background: #d6d7e0;
        z-index: 3;
        text-align: start;
        padding: 10px;
        width: 100px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    /* 
        Shades the even rows 
        If we shade the td:nth-child(even), th:nth-child(even),
        it will shade the columns
    */
    tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    td {
        padding: 10px;
    }
}

.collapsed-row-item {
    /* background: #f7ddf2; */
    width: 70%;
    padding: 0rem 1rem;
    /* border-radius: 5px; */
}

.collapsed-row-div {
    display: flex;
    justify-content: center;
    background: #f5f0f4;
}



.action-btns {
    display: flex;
    gap: 0.5rem;
}

.score-pill {
    background-color: #f06c6c;
    padding: 0.1rem 0.8rem;
    border-radius: 30px;
    font-weight: bold;
    text-align: center;
}

.tracker-actions{
    display: flex;
    justify-content: space-between;
}

.no-wrap{
    white-space: nowrap;
}

#search-bar{
    width: 100%;
    border: 1px solid #d3d2d5;
    border-radius: 8px;
    padding: 10px;
}

#search-filter-bar{
    width: 60%;
    gap: 1rem;
    display: inline-flex;
}

.filter-apps-done {
    display: flex;
    align-items: center;
}

.chip {
    display: inline-block;
    padding: 0px 20px;
    height: 40px;
    font-size: 16px;
    border-radius: 25px;
    background-color: #f1f1f1;
    align-items: center;
    display: flex;
    position: relative;
}

.chip-image-container {
    width: 40px; /* Set the desired width */
    height: 40px; /* Set the desired height */
    border-radius: 50%; /* Make the container circular */
    overflow: hidden; /* Hide any overflow to ensure the image fits within the circle */
    display: flex;
    justify-content: center;
    align-items: center;
    float: left;
    margin: 0 10px 0 -20px;
}

.chip-image-container img {
    width: 100%;
    height: 100%;
    scale: 1.2;
    object-fit: cover; /* Ensure the image covers the container without stretching */
}

.ribbon {
    width: 60px;
    font-size: 14px;
    padding: 4px;
    position: absolute;
    right: -25px;
    top: -12px;
    text-align: center;
    border-radius: 25px;
    transform: rotate(20deg); /* to angle something */
    background-color: #ff9800;
    color: white;
  }


/* Styling guide
- p.center { <---- this is to access <p> elements with class="center"
- * { <---- universal selector (*) selects all HTML elements on the page.
- h1, h2, p { <---- this groups the styling, applying to all
- @property rule is used to define custom CSS properties 
    e.g. @property --myColor {
            syntax: "<color>";
            inherits: true;
            initial-value: lightgray;
        }
    usage: backgound-color: var(--myColor);
- transforms allow you to move, rotate, scale, and skew elements:
1) translate() method moves an element from its current position
e.g. transform: translate(50px, 100px); <---- moves it 50 pixels right, and 100 pixels down
2) rotate() method rotates an element clockwise or counter-clockwise
e.g. transform: rotate(20deg); <---- rotates clockwise with 20 degrees
e.g. transform: rotate(-20deg); <---- rotates anti-clockwise with 20 degrees
3) scale() method increases or decreases the size of an element
e.g. transform: scale(2, 3); <---- *2 of original width, and *3 of original height
4) scaleX() method increases or decreases the width
e.g. transform: scaleX(2); <---- *2 of original width
5) scaleY() method increases or decreases the height
e.g. transform: scaleY(2); <---- *2 of original height
6) skewX() method skews an element along the X-axis by the given angle
e.g. transform: skewX(20deg); <---- skews it 20 degrees along the X-axis
7) skewY() method skews an element along the Y-axis by the given angle
e.g. transform: skewY(20deg); <---- skews it 20 degrees along the Y-axis
8) skew() method skews an element along the X and Y-axis by the given angles.
e.g. transform: skew(20deg, 10deg);
9) matrix() method combines all the 2D transform methods into one
e.g. transform: matrix(1, -0.3, 0, 1, 0, 0); <---- matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())


- Media Queries:
--> A media query consists of a media type and can contain one or more media features, 
    which resolve to either true or false.
--> e.g.
@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) { 
<--- When the width is between 600px and 900px OR above 1100px

*/